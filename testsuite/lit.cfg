import os
import lit.util
import lit.formats

# From libcxx lit: Tell pylint that we know config and lit_config exist somewhere.
if "PYLINT_IMPORT" in os.environ:
    config = object()
    lit_config = object()

config.name = "DimetaTest"

loaded_site_cfg = getattr(config, "loaded_site_config", False)
if not loaded_site_cfg:
    site_cfg = lit_config.params.get("ditests_site_config", None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = [".c"]
config.excludes = ["Inputs", "must_temp", "Output"]


#test_exec_root = getattr(config, "ditests_build_dir", None)
llvm_version = getattr(config, "llvm_version", None)
filecheck = getattr(config, "filecheck", None)
must_run = getattr(config, "must_run", None)
typeart_mpicc = getattr(config, "typeart_mpicc", None)


test_exec_root = config.ditests_build_dir + "/testsuite-exec"

typeart_types_d = 'TYPEART_TYPE_FILE={}/%basename_t.yaml'.format(test_exec_root)

config.substitutions.append(("%typeart_data", typeart_types_d))
config.substitutions.append(("%ditests_test_dir", test_exec_root))

config.substitutions.append(("%filecheck", '{} {} {}'.format(filecheck,'--allow-empty', '--dump-input-context=30')))
config.substitutions.append(('%typeart-mpicc', '{} {}'.format(typeart_types_d, typeart_mpicc)))
config.substitutions.append(('%must-mpiexec', '{} {}'.format(must_run, '--must:errorcode 0 --must:typeart --must:output json --must:quiet')))
